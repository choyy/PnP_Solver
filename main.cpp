#include <iostream>
#include <vector>

#include "pnp_solver.h"


using namespace std;
int main(int argc, char* argv[])
{
  Eigen::MatrixXd Pw(3,10);
  Eigen::MatrixXd pc(2,10);

  // Real R, t
  // -0.5947    0.5336    0.6013   -0.3196
  //  0.3128    0.8426   -0.4384    0.5074
  // -0.7406   -0.0726   -0.6680    6.9190
  Pw << -0.358766617491316, 2.94557603893287, 0.406286483779424, 0.0954307269523914, -0.603231015882198, -0.767905057411133, -0.692764254706282, 2.23140070884122, 0.973226036585067, -0.651271326119470,
        -1.62622150532112, 0.374782771948781, -1.10503288365201, -1.39553176915725, -1.94459344972288, 1.31259370823405, -1.93976665760412, 0.400674583561208, -1.53332683193281, -0.329260801860960,
        0.829761565608621, 0.218092656450223, 0.973051925203624, 0.0963570029914574, -0.311969962878100, 0.694526358179699, 0.858585688687363, -0.586747673897172, 2.02335111665708, 2.00869772439131;
  pc <<
      // -0.0703762981362291, -0.381254464676006, -0.0935264121892561, -0.154385987492510, -0.153716823417111, 0.181155179096954, -0.0608998068081226, -0.317216379387731, -0.100806178994422, 0.180816051231243,
      // -0.198385752581484, 0.361231179725880, -0.119566043475726, -0.0988890192891067, -0.153337520178801, 0.154271775550470, -0.245750971484815, 0.319780913319571, -0.275750306605326, -0.140417573652227;
      342.995198509654, 91.1838836124350, 324.243606126703, 274.947350131067, 275.489373032140, 546.735695068533, 350.671156485421, 143.054732695938, 318.346995014518, 546.461001497307,
      143.275255460627, 585.372631983445, 205.542825654176, 221.877674761606, 178.863359058747, 421.874702684871, 105.856732526996, 552.626921522461, 82.1572577817923, 189.070116814741;

  Eigen::Matrix3d K;
  // K << 1, 0, 0,
  //      0, 1, 0,
  //      0, 0, 1;
  K << 810, 0, 400,
       0, 790, 300,
       0, 0, 1;

  std::vector< Eigen::Vector3d > pts3d;
  std::vector< Eigen::Vector2d > pts2d;
  Eigen::Matrix3d R;
  Eigen::Vector3d t;
  for(int i=0;i<Pw.cols();i++)
  {
    pts3d.push_back(Eigen::Vector3d(Pw(0,i),Pw(1,i),Pw(2,i)));
    pts2d.push_back(Eigen::Vector2d(pc(0,i),pc(1,i)));
  }
  solvePnPbyEPnP(K, pts3d, pts2d, R, t);
  // solvePnPbyParaPersGN(K, pts3d, pts2d, R, t);
  std::cout<<"R: "<<R<<std::endl;
  std::cout<<"t: "<<t<<std::endl;

  return 0;
}

